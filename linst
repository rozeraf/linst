#!/usr/bin/env bash

# linst: Linux Distribution Helper - скачивание и запись дистрибутивов на флешку
# Версия: 2.0.0
# Автор: Раф
# Требования: bash, sudo, lsblk, dd, ventoy (опционально), fzf (опционально), jq, curl/wget

set -euo pipefail
IFS=$'\n\t'

# ====== Конфигурация ======
MOUNT_BASE="/mnt/linst"
CONFIG_FILE="${BASH_SOURCE%/*}/distros.json"
DOWNLOAD_DIR="${HOME}/Downloads"
# ==========================

# Глобальные переменные для cleanup
MOUNTED_PATH=""
LOCK_FILE=""

# Cleanup функция для аварийного завершения
cleanup() {
    if [[ -n "$MOUNTED_PATH" && -d "$MOUNTED_PATH" ]]; then
        echo "Экстренное размонтирование: $MOUNTED_PATH"
        safe_unmount "$MOUNTED_PATH"
    fi
    
    if [[ -n "$LOCK_FILE" && -f "$LOCK_FILE" ]]; then
        rm -f "$LOCK_FILE"
    fi
}

# Установка trap для cleanup
trap cleanup EXIT INT TERM

# Валидация имени устройства
validate_device() {
    local device="$1"
    
    # Разрешены только буквы, цифры, подчеркивания
    if [[ ! "$device" =~ ^[a-zA-Z0-9_]+$ ]]; then
        echo "Ошибка: недопустимое имя устройства '$device'" >&2
        return 1
    fi
    
    # Проверка что устройство существует
    if [[ ! -b "/dev/$device" ]]; then
        echo "Ошибка: устройство '/dev/$device' не существует" >&2
        return 1
    fi
    
    # Предупреждение о системных дисках
    if [[ "$device" =~ ^(sda|nvme0n1)$ ]]; then
        echo "⚠️  ВНИМАНИЕ: '$device' может быть системным диском!"
        echo "Убедитесь, что выбрали правильное устройство!"
        confirm "Продолжить с устройством $device? Это может быть опасно!" || return 1
    fi
    
    return 0
}

# Создание lock-файла
create_lock() {
    local device="$1"
    LOCK_FILE="/tmp/linst.$device.lock"
    
    if [[ -f "$LOCK_FILE" ]]; then
        echo "Ошибка: устройство $device уже используется другим процессом linst" >&2
        return 1
    fi
    
    echo $$ > "$LOCK_FILE"
}

# Проверка зависимостей
check_dependencies() {
    local deps=("jq" "lsblk" "dd")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        echo "Ошибка: отсутствуют зависимости: ${missing[*]}" >&2
        echo "Установите их с помощью пакетного менеджера системы" >&2
        exit 1
    fi
    
    # Проверка наличия curl или wget
    if ! command -v curl &>/dev/null && ! command -v wget &>/dev/null; then
        echo "Ошибка: требуется curl или wget для скачивания ISO" >&2
        exit 1
    fi
}

# Вывод справки
print_help() {
    cat <<-EOF
Usage: linst [options]

Опции:
  -h, --help         Показать это сообщение
  -i, --iso PATH     Использовать локальный ISO-образ
  -d, --device DEV   Устройство (например sdd или /dev/sdd)
  -m, --method M     Метод записи: dd или ventoy
  --no-confirm       Отключить интерактивное подтверждение
  --list-distros     Показать список доступных дистрибутивов
  --download-only    Только скачать ISO, не записывать

Примеры:
  linst                          # Интерактивный режим
  linst -i ~/Downloads/arch.iso  # Использовать локальный ISO
  linst --list-distros           # Показать доступные дистрибутивы
EOF
}

# Загрузка конфигурации дистрибутивов
load_distros_config() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo "Ошибка: файл конфигурации $CONFIG_FILE не найден" >&2
        exit 1
    fi
    
    if ! jq empty "$CONFIG_FILE" 2>/dev/null; then
        echo "Ошибка: некорректный JSON в $CONFIG_FILE" >&2
        exit 1
    fi
}

# Показать список доступных дистрибутивов
list_distros() {
    echo "Доступные дистрибутивы:"
    echo
    
    jq -r '.distros | to_entries[] | "\(.key): \(.value.name)"' "$CONFIG_FILE" | \
    while IFS=': ' read -r key name; do
        printf "  %-15s %s\n" "$key" "$name"
    done
}

# Подтверждение с дефолтом Yes
confirm() {
    local prompt="${1:-Продолжить?} [Y/n]: "
    local answer
    
    read -rp "$prompt" answer || return 1
    [[ -z "$answer" || "$answer" =~ ^[Yy]$ ]]
}

# Список устройств и выбор
choose_device() {
    local list
    # Поддержка SD, NVMe, MMC устройств
    list=$(lsblk -d -o NAME,SIZE,LABEL,MODEL | awk '$2 ~ /^[0-9]+.*[KMGT]?$/ && $1 ~ /^(sd|nvme|mmcblk)[a-z0-9]*$/ {print}' || true)
    
    if [[ -z "$list" ]]; then
        echo "Нет доступных устройств" >&2
        return 1
    fi
    
    if command -v fzf &>/dev/null; then
        echo "$list" | fzf --header="Выберите устройство для записи" --preview="echo 'Устройство: {}'" | \
            awk '{print $1}'
    else
        echo "Доступные устройства:"
        echo "$list"
        echo
        read -rp "Введите имя устройства (например sdd, nvme0n1): " dev
        echo "$dev"
    fi
}

# Выбор дистрибутива
choose_distro() {
    local distros
    distros=$(jq -r '.distros | keys[]' "$CONFIG_FILE")
    
    if command -v fzf &>/dev/null; then
        echo "$distros" | fzf --header="Выберите дистрибутив" --preview="echo 'Дистрибутив: {}'"
    else
        echo "Доступные дистрибутивы:"
        local i=1
        declare -A distro_map
        
        while IFS= read -r distro; do
            local name
            name=$(jq -r ".distros[\"$distro\"].name" "$CONFIG_FILE")
            printf "%2d) %s\n" "$i" "$name"
            distro_map[$i]="$distro"
            ((i++))
        done <<< "$distros"
        
        echo
        read -rp "Выберите номер дистрибутива: " choice
        
        if [[ -n "${distro_map[$choice]:-}" ]]; then
            echo "${distro_map[$choice]}"
        else
            echo "Неверный выбор" >&2
            return 1
        fi
    fi
}

# Выбор версии дистрибутива
choose_version() {
    local distro="$1"
    local versions
    versions=$(jq -r ".distros[\"$distro\"].versions | keys[]" "$CONFIG_FILE")
    
    if [[ $(echo "$versions" | wc -l) -eq 1 ]]; then
        echo "$versions"
        return
    fi
    
    if command -v fzf &>/dev/null; then
        echo "$versions" | fzf --header="Выберите версию $distro" --preview="echo 'Версия: {}'"
    else
        echo "Доступные версии для $distro:"
        local i=1
        declare -A version_map
        
        while IFS= read -r version; do
            local desc
            desc=$(jq -r ".distros[\"$distro\"].versions[\"$version\"].description" "$CONFIG_FILE")
            printf "%2d) %s\n" "$i" "$desc"
            version_map[$i]="$version"
            ((i++))
        done <<< "$versions"
        
        echo
        read -rp "Выберите номер версии: " choice
        
        if [[ -n "${version_map[$choice]:-}" ]]; then
            echo "${version_map[$choice]}"
        else
            echo "Неверный выбор" >&2
            return 1
        fi
    fi
}

# Выбор рабочего стола (DE)
choose_desktop_environment() {
    local distro="$1"
    local version="$2"
    
    # Проверяем, есть ли desktop_environments
    if ! jq -e ".distros[\"$distro\"].versions[\"$version\"].desktop_environments" "$CONFIG_FILE" &>/dev/null; then
        return 0  # Нет выбора DE
    fi
    
    local des
    des=$(jq -r ".distros[\"$distro\"].versions[\"$version\"].desktop_environments | keys[]" "$CONFIG_FILE")
    
    if command -v fzf &>/dev/null; then
        echo "$des" | fzf --header="Выберите рабочий стол" --preview="echo 'Рабочий стол: {}'"
    else
        echo "Доступные рабочие столы:"
        local i=1
        declare -A de_map
        
        while IFS= read -r de; do
            local desc
            desc=$(jq -r ".distros[\"$distro\"].versions[\"$version\"].desktop_environments[\"$de\"].description" "$CONFIG_FILE")
            printf "%2d) %s\n" "$i" "$desc"
            de_map[$i]="$de"
            ((i++))
        done <<< "$des"
        
        echo
        read -rp "Выберите номер рабочего стола: " choice
        
        if [[ -n "${de_map[$choice]:-}" ]]; then
            echo "${de_map[$choice]}"
        else
            echo "Неверный выбор" >&2
            return 1
        fi
    fi
}

# Получение URL для скачивания
get_download_url() {
    local distro="$1"
    local version="$2"
    local de="${3:-}"
    
    if [[ -n "$de" ]]; then
        jq -r ".distros[\"$distro\"].versions[\"$version\"].desktop_environments[\"$de\"].iso_url" "$CONFIG_FILE"
    else
        jq -r ".distros[\"$distro\"].versions[\"$version\"].iso_url" "$CONFIG_FILE"
    fi
}

# Скачивание ISO
download_iso() {
    local url="$1"
    local filename="$2"
    local filepath="$DOWNLOAD_DIR/$filename"
    
    # Создаем директорию если не существует
    mkdir -p "$DOWNLOAD_DIR"
    
    echo "Скачивание: $url"
    echo "Сохранение в: $filepath"
    
    # Удаляем частичный файл если существует
    [[ -f "$filepath" ]] && rm -f "$filepath"
    
    local download_success=false
    if command -v curl &>/dev/null; then
        if curl -L -o "$filepath" "$url" --progress-bar --retry 3 --retry-delay 2; then
            download_success=true
        fi
    elif command -v wget &>/dev/null; then
        if wget -O "$filepath" "$url" --progress=bar --tries=3 --retry-connrefused; then
            download_success=true
        fi
    else
        echo "Ошибка: отсутствуют curl и wget" >&2
        return 1
    fi
    
    if [[ "$download_success" == true && -s "$filepath" ]]; then
        local file_size
        file_size=$(du -h "$filepath" | cut -f1)
        echo "Скачивание завершено: $filepath (размер: $file_size)"
        echo "$filepath"
    else
        echo "Ошибка скачивания или файл пуст" >&2
        [[ -f "$filepath" ]] && rm -f "$filepath"
        return 1
    fi
}

# Проверка наличия Ventoy CLI
check_ventoy_cli() {
    if ! command -v ventoy &>/dev/null; then
        echo "Warning: ventoy CLI не обнаружен в PATH. Установка Ventoy невозможна." >&2
        return 1
    fi
    return 0
}

# Безопасное размонтирование
safe_unmount() {
    local mp="$1"
    
    echo "Синхронизация данных..."
    sudo sync
    
    echo "Размонтирую $mp..."
    
    # Попытка обычного размонтирования
    if sudo umount "$mp" 2>/dev/null; then
        echo "Размонтирование успешно"
    else
        echo "Обычное размонтирование не удалось, пробую принудительное..."
        
        # Ждем немного и пробуем снова
        sleep 2
        sudo sync
        
        if sudo umount "$mp" 2>/dev/null; then
            echo "Размонтирование успешно"
        else
            echo "Принудительное размонтирование..."
            if sudo umount -f "$mp" 2>/dev/null; then
                echo "Принудительное размонтирование успешно"
            else
                echo "Ленивое размонтирование..."
                sudo umount -l "$mp" 2>/dev/null || true
                echo "Ленивое размонтирование выполнено"
            fi
        fi
    fi
    
    # Удаляем директорию точки монтирования
    if [[ -d "$mp" ]]; then
        sudo rmdir "$mp" 2>/dev/null || true
    fi
}

# Получение раздела для Ventoy
get_ventoy_partition() {
    local device="$1"
    
    # Для NVMe устройств используем p1, для остальных - 1
    if [[ "$device" =~ ^nvme[0-9]+n[0-9]+$ ]]; then
        echo "${device}p1"
    else
        echo "${device}1"
    fi
}

# Запись ISO
write_iso() {
    local iso_path="$1"
    local device="$2"
    local method="$3"
    
    case "$method" in
    dd)
        echo "Записываю ISO на /dev/$device с помощью dd..."
        sudo dd bs=1M if="$iso_path" of="/dev/$device" status=progress conv=fsync
        echo "Синхронизация данных..."
        sudo sync
        echo "Запись завершена"
        ;;
    ventoy)
        check_ventoy_cli || return 1
        
        # Установка Ventoy если нет
        if ! ventoy -l "/dev/$device" &>/dev/null; then
            echo "Устанавливаю Ventoy на /dev/$device..."
            sudo ventoy -i "/dev/$device"
        fi
        
        # Определяем раздел для Ventoy
        local ventoy_partition
        ventoy_partition=$(get_ventoy_partition "$device")
        
        # Монтируем первый раздел
        local mp="$MOUNT_BASE/$device"
        sudo mkdir -p "$mp"
        MOUNTED_PATH="$mp"
        
        # Размонтируем если уже смонтирован
        sudo umount "/dev/$ventoy_partition" 2>/dev/null || true
        sudo umount "$mp" 2>/dev/null || true
        
        # Ждем немного чтобы устройство было готово
        sleep 1
        
        echo "Монтирую /dev/$ventoy_partition в $mp..."
        if ! sudo mount -o rw "/dev/$ventoy_partition" "$mp"; then
            echo "Ошибка: не удалось смонтировать /dev/$ventoy_partition" >&2
            sudo rmdir "$mp" 2>/dev/null || true
            MOUNTED_PATH=""
            return 1
        fi
        
        echo "Копирую ISO в $mp..."
        sudo cp "$iso_path" "$mp/"
        sudo sync
        
        # Безопасное размонтирование
        safe_unmount "$mp"
        MOUNTED_PATH=""
        ;;
    *)
        echo "Неизвестный метод '$method'" >&2
        return 1
        ;;
    esac
}

# Ventoy с прямым скачиванием на устройство
write_iso_ventoy_direct() {
    local download_url="$1"
    local filename="$2"
    local device="$3"
    
    check_ventoy_cli || return 1
    
    # Установка Ventoy если нет
    if ! ventoy -l "/dev/$device" &>/dev/null; then
        echo "Устанавливаю Ventoy на /dev/$device..."
        sudo ventoy -i "/dev/$device"
    fi
    
    # Определяем раздел для Ventoy
    local ventoy_partition
    ventoy_partition=$(get_ventoy_partition "$device")
    
    # Монтируем первый раздел
    local mp="$MOUNT_BASE/$device"
    sudo mkdir -p "$mp"
    MOUNTED_PATH="$mp"
    
    # Размонтируем если уже смонтирован
    sudo umount "/dev/$ventoy_partition" 2>/dev/null || true
    sudo umount "$mp" 2>/dev/null || true
    
    # Ждем немного чтобы устройство было готово
    sleep 1
    
    echo "Монтирую /dev/$ventoy_partition в $mp..."
    if ! sudo mount -o rw "/dev/$ventoy_partition" "$mp"; then
        echo "Ошибка: не удалось смонтировать /dev/$ventoy_partition" >&2
        sudo rmdir "$mp" 2>/dev/null || true
        MOUNTED_PATH=""
        return 1
    fi
    
    echo "Скачиваю ISO прямо на устройство: $download_url"
    
    # Скачиваем прямо на устройство с временным файлом
    local temp_file="$mp/.${filename}.tmp"
    local download_success=false
    
    if command -v curl &>/dev/null; then
        if sudo curl -L -o "$temp_file" "$download_url" --progress-bar --retry 3 --retry-delay 2; then
            download_success=true
        fi
    elif command -v wget &>/dev/null; then
        if sudo wget -O "$temp_file" "$download_url" --progress=bar --tries=3 --retry-connrefused; then
            download_success=true
        fi
    else
        echo "Ошибка: отсутствуют curl и wget" >&2
        safe_unmount "$mp"
        MOUNTED_PATH=""
        return 1
    fi
    
    # Проверяем, что файл скачался и не пуст
    if [[ "$download_success" == true && -s "$temp_file" ]]; then
        echo "Переименование файла..."
        sudo mv "$temp_file" "$mp/$filename"
        sudo sync
        
        local file_size
        file_size=$(sudo du -h "$mp/$filename" | cut -f1)
        echo "Скачивание завершено: $mp/$filename (размер: $file_size)"
    else
        echo "Ошибка скачивания или файл пуст" >&2
        [[ -f "$temp_file" ]] && sudo rm -f "$temp_file"
        safe_unmount "$mp"
        MOUNTED_PATH=""
        return 1
    fi
    
    # Безопасное размонтирование
    safe_unmount "$mp"
    MOUNTED_PATH=""
}

# Основная функция
main() {
    local iso_path="" device="" method=""
    local no_confirm=false download_only=false
    
    check_dependencies
    load_distros_config
    
    # Парсинг опций
    while [[ $# -gt 0 ]]; do
        case "$1" in
        -h | --help)
            print_help
            exit 0
            ;;
        -i | --iso)
            iso_path="$2"
            shift 2
            ;;
        -d | --device)
            device="${2#/dev/}"
            validate_device "$device" || exit 1
            shift 2
            ;;
        -m | --method)
            method="$2"
            shift 2
            ;;
        --no-confirm)
            no_confirm=true
            shift
            ;;
        --list-distros)
            list_distros
            exit 0
            ;;
        --download-only)
            download_only=true
            shift
            ;;
        *)
            echo "Неизвестная опция: $1" >&2
            exit 1
            ;;
        esac
    done
    
    # Если не указан локальный ISO, выбираем дистрибутив
    if [[ -z "$iso_path" ]]; then
        echo "=== Выбор дистрибутива ==="
        local distro version de=""
        
        distro=$(choose_distro)
        echo "Выбран дистрибутив: $(jq -r ".distros[\"$distro\"].name" "$CONFIG_FILE")"
        
        version=$(choose_version "$distro")
        echo "Выбрана версия: $version"
        
        de=$(choose_desktop_environment "$distro" "$version")
        if [[ -n "$de" ]]; then
            echo "Выбран рабочий стол: $de"
        fi
        
        # Получаем URL для скачивания
        local download_url filename
        download_url=$(get_download_url "$distro" "$version" "$de")
        filename=$(basename "$download_url")
        
        echo
        echo "=== Выбор метода записи ==="
        
        # Выбор метода записи
        if [[ -z "$method" ]]; then
            echo "Выберите метод записи:"
            echo "1) dd (скачать на ПК, затем записать)"
            echo "2) ventoy (скачать прямо на устройство Ventoy)"
            read -rp "Введите 1 или 2: " method_choice
            
            case "$method_choice" in
            1) method="dd" ;;
            2) method="ventoy" ;;
            *)
                echo "Неверный выбор" >&2
                exit 1
                ;;
            esac
        fi
        
        if [[ "$method" == "ventoy" ]]; then
            # Для Ventoy: сначала выбираем устройство, потом скачиваем прямо туда
            echo
            echo "=== Выбор устройства ==="
            
            if [[ -z "$device" ]]; then
                device=$(choose_device)
            fi
            
            # Валидация устройства
            validate_device "$device" || exit 1
            
            # Создание lock-файла
            create_lock "$device" || exit 1
            
            # Подтверждение для Ventoy
            if [[ "$no_confirm" != true ]]; then
                echo
                echo "Дистрибутив: $(jq -r ".distros[\"$distro\"].name" "$CONFIG_FILE") $version"
                if [[ -n "$de" ]]; then
                    echo "Рабочий стол: $de"
                fi
                echo "Устройство: /dev/$device"
                echo "Метод: Ventoy (скачивание прямо на устройство)"
                echo
                confirm "Выполнить установку Ventoy и скачивание ISO?" || {
                    echo "Отменено пользователем"
                    exit 0
                }
            fi
            
            # Выполнение Ventoy
            echo
            echo "=== Установка Ventoy и скачивание ISO ==="
            write_iso_ventoy_direct "$download_url" "$filename" "$device"
            
        else
            # Для dd: сначала скачиваем на ПК
            echo
            echo "=== Скачивание ISO ==="
            iso_path=$(download_iso "$download_url" "$filename")
            
            # Проверяем существование ISO
            if [[ ! -f "$iso_path" ]]; then
                echo "Ошибка: ISO не найден '$iso_path'" >&2
                exit 1
            fi
            
            # Если только скачивание, завершаем
            if [[ "$download_only" == true ]]; then
                echo "Скачивание завершено: $iso_path"
                exit 0
            fi
            
            echo
            echo "=== Выбор устройства ==="
            
            # Выбор устройства
            if [[ -z "$device" ]]; then
                device=$(choose_device)
            fi
            
            # Валидация устройства
            validate_device "$device" || exit 1
            
            # Создание lock-файла
            create_lock "$device" || exit 1
            
            # Подтверждение для dd
            if [[ "$no_confirm" != true ]]; then
                echo
                echo "ISO: $(basename "$iso_path")"
                echo "Устройство: /dev/$device"
                echo "Метод: dd (прямая запись)"
                echo
                confirm "Выполнить запись? ВСЕ ДАННЫЕ НА УСТРОЙСТВЕ БУДУТ УДАЛЕНЫ!" || {
                    echo "Отменено пользователем"
                    exit 0
                }
            fi
            
            # Выполнение записи dd
            echo
            echo "=== Запись ISO ==="
            write_iso "$iso_path" "$device" "$method"
        fi
        
    else
        # Локальный ISO - старая логика
        # Проверяем существование ISO
        if [[ ! -f "$iso_path" ]]; then
            echo "Ошибка: ISO не найден '$iso_path'" >&2
            exit 1
        fi
        
        # Если только скачивание, завершаем (не имеет смысла для локального ISO)
        if [[ "$download_only" == true ]]; then
            echo "Опция --download-only не применима для локального ISO"
            exit 1
        fi
        
        echo
        echo "=== Запись локального ISO ==="
        
        # Выбор устройства
        if [[ -z "$device" ]]; then
            device=$(choose_device)
        fi
        
        # Валидация устройства
        validate_device "$device" || exit 1
        
        # Создание lock-файла
        create_lock "$device" || exit 1
        
        # Выбор метода записи
        if [[ -z "$method" ]]; then
            echo "Выберите метод записи:"
            echo "1) dd (прямая запись образа)"
            echo "2) ventoy (установка Ventoy + копирование ISO)"
            read -rp "Введите 1 или 2: " method_choice
            
            case "$method_choice" in
            1) method="dd" ;;
            2) method="ventoy" ;;
            *)
                echo "Неверный выбор" >&2
                exit 1
                ;;
            esac
        fi
        
        # Подтверждение
        if [[ "$no_confirm" != true ]]; then
            echo
            echo "ISO: $(basename "$iso_path")"
            echo "Устройство: /dev/$device"
            echo "Метод: $method"
            echo
            confirm "Выполнить запись? ВСЕ ДАННЫЕ НА УСТРОЙСТВЕ БУДУТ УДАЛЕНЫ!" || {
                echo "Отменено пользователем"
                exit 0
            }
        fi
        
        # Выполнение записи
        echo
        echo "=== Запись ISO ==="
        write_iso "$iso_path" "$device" "$method"
    fi
    
    echo
    echo "✅ Готово! ISO записан на /dev/$device"
    
    # Дополнительная информация
    echo
    echo "Устройство готово к использованию."
    case "$method" in
    dd)
        echo "Для загрузки установите /dev/$device как загрузочное устройство в BIOS/UEFI."
        ;;
    ventoy)
        echo "Ventoy установлен. Вы можете скопировать дополнительные ISO в раздел Ventoy."
        echo "Для добавления новых ISO просто скопируйте их в корень устройства."
        ;;
    esac
}

main "$@"
